This is basically hosted through a web browser with no web server -
once node.js has been activated then we are using a web server to host it so you can connect a database
and do other fancy stuff. So you can do more backend stuff , where if you just use a webbrowser it can'then
it can't do certain things. 

If you have a web application hosted via a server, if the server is down then you can't access 
the webpage, where as previsouly we were rending html directly to the webbrowser. 

packaged.json has the configuration for the nodejs app. the script section has how we start the web app. 
we can then use this in the command terminal to start our application. 

Add your node modules folder to gitignore, since everytime you start the application it downloads these anyway. 

// npm init creates a node js



// For database
Add a new route to process the submitted form data. 
This route will not be a GET (e.g. router.get("/", function (req, res)...) 
but a POST (e.g. router.post("/", function (req, res)...) . 
In this route you can then access the submitted form data and write it to the database. 

Also, there is a really good tutorial here that illustrates creating a Node JS application
 whose User interface has HTML forms and on submit the form data is saved to a SQLite 
 database - https://blog.pagesd.info/2019/10/08/crud-with-express-sqlite-10-steps/ 


 Routing:
 Routing refers to determining how an application responds to a client request to a 
 particular endpoint, which is a URI (or path) and a specific HTTP request method (GET, POST, and so on).
 Where:

app is an instance of express.
METHOD is an HTTP request method, in lowercase.
PATH is a path on the server.
HANDLER is the function executed when the route is matched.